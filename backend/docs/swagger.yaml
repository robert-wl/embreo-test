basePath: /api/v1
definitions:
  dto.CreateEventRequest:
    properties:
      company_id:
        type: string
      dates:
        items:
          type: string
        maxItems: 3
        minItems: 3
        type: array
      event_type_id:
        type: string
      location:
        type: string
    required:
    - company_id
    - dates
    - event_type_id
    - location
    type: object
  dto.LogInRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.LogInResponse:
    properties:
      access_token:
        type: string
    type: object
  dto.SetStatusRequest:
    properties:
      remarks:
        type: string
      status:
        $ref: '#/definitions/model.ResponseStatus'
    required:
    - status
    type: object
  model.Company:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
  model.Event:
    properties:
      accepted_at:
        type: string
      company:
        $ref: '#/definitions/model.Company'
      created_at:
        type: string
      dates:
        items:
          format: date-time
          type: string
        type: array
      event_responses:
        items:
          $ref: '#/definitions/model.EventResponse'
        type: array
      event_type:
        $ref: '#/definitions/model.EventType'
      id:
        type: string
      location:
        type: string
      status:
        $ref: '#/definitions/model.EventStatus'
      updated_at:
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.EventResponse:
    properties:
      created_at:
        type: string
      event:
        $ref: '#/definitions/model.Event'
      id:
        type: string
      remarks:
        type: string
      status:
        $ref: '#/definitions/model.ResponseStatus'
      updated_at:
        type: string
      vendor:
        $ref: '#/definitions/model.Vendor'
    type: object
  model.EventStatus:
    enum:
    - pending
    - approved
    type: string
    x-enum-varnames:
    - EventPending
    - EventApproved
  model.EventType:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  model.ResponseStatus:
    enum:
    - pending
    - approved
    - rejected
    type: string
    x-enum-varnames:
    - ResponsePending
    - ResponseApproved
    - ResponseRejected
  model.Role:
    enum:
    - company
    - vendor
    type: string
    x-enum-varnames:
    - CompanyRole
    - VendorRole
  model.User:
    properties:
      company:
        $ref: '#/definitions/model.Company'
      created_at:
        type: string
      id:
        type: string
      role:
        $ref: '#/definitions/model.Role'
      updated_at:
        type: string
      username:
        type: string
      vendor:
        $ref: '#/definitions/model.Vendor'
    type: object
  model.Vendor:
    properties:
      created_at:
        type: string
      event_types:
        items:
          $ref: '#/definitions/model.EventType'
        type: array
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
  utils.ErrorResponse:
    properties:
      error:
        items:
          type: string
        type: array
      message:
        type: string
      status_code:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a backend server for Embreo Test.
  title: Embreo Backend API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with their credentials and return an access
        token
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LogInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LogInResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      tags:
      - authentication
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      tags:
      - authentication
  /events:
    get:
      consumes:
      - application/json
      description: Find all events
      parameters:
      - description: Page
        in: query
        name: page
        type: integer
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Event'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      tags:
      - event
    post:
      consumes:
      - application/json
      description: Create an event
      parameters:
      - description: Event
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/dto.CreateEventRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      tags:
      - event
  /events/{id}:
    get:
      consumes:
      - application/json
      description: Find event by secure id
      parameters:
      - description: Secure ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Event'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      tags:
      - event
  /events/{id}/status:
    post:
      consumes:
      - application/json
      description: Set event status
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      - description: ResponseStatus
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/dto.SetStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      tags:
      - event
  /events/{id}/vendors:
    get:
      consumes:
      - application/json
      description: Find all vendors by event
      parameters:
      - description: Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Vendor'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Find all vendors by event
      tags:
      - vendor
  /events/types:
    get:
      consumes:
      - application/json
      description: Find all event types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.EventType'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - BearerAuth: []
      tags:
      - event
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
